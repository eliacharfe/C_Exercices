/* ex4a.c
 *    named pipe
 * =============================================
 * ==== Written by: Eliachar Feig. ID: 302278338 ===
 * =============================================
 * This program create a named-pipe for communicates from sever to clients
 * and builds array of 50000 and insert to it randomally from 0 to 200000.
 * Proceess will run until he erase all the array according to the numbers
 * sent by the clients each client will run in an infinite loop and will send
 * to server randomly a number from 0 to 200000,and send its ID pid process
 *  the server get it and send 0 if not found and 1 if found, that's how the
 *  client can calculate how many number he sent that made deletion in the server
 *  array.
 *  The client will calculate how many numbers he sent and how many caused a
 *  deletion in the server array.
 *  When the array is empty the server exit loop and send to clients process -1
 *  which tell them to terminate. Server will send -1 to client to tell them
 *  to terminate program then  terminate then the program
 *   The client gets in argument  vector the pipe of the father and 1 2 or 3 (id)
 *   which each one will creates his own pipe for reading according to the number
 *   seed is according id
 *
 *   No input
 * Output : Server: how many numbers got from children, how many he deleted and
 *                  how much time took for do the job
 *          Client: how many number send and how many caused a delete
 */
#include <signal.h>
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <string.h>
#include <string.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>
//----------------------------------------
#define      MAX_ARR   50000
#define      MAX_RAND  200000
#define      ID1       1
#define      ID2       2
#define      ID3       3
#define      NONE      4
#define      FALSE     0
#define      TRUE      1
#define      START    -2
#define      END       -1
//-------------------PROTOTYPES ------------------
void build_array(int arr[]);
void do_task(int arr[], FILE *fdr, FILE *fdw1,FILE *fdw2,FILE *fdw3);
void send_signal_to_start(FILE *fdw1,FILE *fdw2,FILE *fdw3,int num);
int  delete_from_arr(int arr[], int max_arr, int num_to_del);
void quickSort(int arr[], int low, int high);
int partition (int arr[], int low, int high);
void swap(int* i, int* j);
bool bin_search(int arr[], int num);
//void exit_error();
//-------------------------------------
int main(int argc, char *argv[])
{
	FILE *fdr = fopen(argv[1], "r") ;
	FILE *fdw1 = fopen(argv[2], "w") ;
	FILE *fdw2 = fopen(argv[3], "w") ;
	FILE *fdw3 = fopen(argv[4], "w") ;
	if (!fdr || !fdw1 || !fdw2 || !fdw3 ) {
		perror("1 cannot open my_fifo pipe for write") ;
		exit(EXIT_FAILURE) ;
	}

	int arr[MAX_ARR], num, found  = FALSE;
	send_signal_to_start(fdw1,fdw2,fdw3,found);

	for (int i = 0; i < ID3; i++)
		fscanf(fdr, "%d", &num);
	num = START;
	send_signal_to_start(fdw1,fdw2,fdw3,num);

	build_array(arr);//build array
	quickSort(arr, 0,  MAX_ARR-1);//sort array

	do_task(arr, fdr, fdw1, fdw2, fdw3); // do the main job

	return EXIT_SUCCESS;
}
//---------------------------------------------------------------------------
void do_task(int arr[], FILE *fdr, FILE *fdw1,FILE *fdw2,FILE *fdw3)
{
	int num, max_arr = MAX_ARR,id = NONE,
		num_of_father_get = 0, num_of_del = 0, found = FALSE;
	time_t time1 = time(NULL);
	while (max_arr != 0)
	{
		fscanf(fdr, "%d %d", &num, &id);
		num_of_father_get++;
		if (bin_search(arr, num)) // if found the num in array
		{
			max_arr = delete_from_arr(arr,max_arr, num); // max_arr--
			num_of_del++; // set
			found = TRUE; // 1
		}
		else
			found = FALSE; // 0
		switch(id)
		{
		case ID1:
			fprintf(fdw1, "%d\n", found);
			fflush(fdw1); break;// father write
		case ID2:
			fprintf(fdw2, "%d\n", found);// father write
			fflush(fdw2); break;
		case ID3:
			fprintf(fdw3, "%d\n", found);// father write
			fflush(fdw3); break;
		case NONE:
			break;
		}
	}
	time_t time2 = time(NULL);
	time_t time = time2 - time1;
	found = END;// -1
	send_signal_to_start(fdw1,fdw2,fdw3,found);

	printf("%d %d %lf\n", num_of_father_get, num_of_del, (double)time );

}
//--------------------------------------------------------
void send_signal_to_start(FILE *fdw1,FILE *fdw2,FILE *fdw3,int num)
{
	fprintf(fdw1, "%d\n", num);
	fflush(fdw1);
	fprintf(fdw2, "%d\n", num);
	fflush(fdw2);
	fprintf(fdw3, "%d\n", num);
	fflush(fdw3);
}
//------------------------------------
void build_array(int arr[])
{
	for (int i = 0; i < MAX_ARR; i++) // build array, max = 50000
		arr[i] = rand()% MAX_RAND;// 0 -200000
}
//-------------------------------------------------------------------
int delete_from_arr(int arr[], int max_arr, int num_to_del)
{
	int i, j;
	for (i = 0; i < max_arr; i++)
		if (arr[i] == num_to_del)
			break;
	if (i <= max_arr)
	{
		max_arr--;
		for (j = i; j < max_arr; j++)
			arr[j] = arr[j+1];
	}
	return max_arr;
}
//---------------------------------------------------------------------------
bool bin_search(int arr[], int num)
{
	int first = 0;
	int last = MAX_ARR - 1;
	int middle = (first + last)/2;
	while (first <= last)
	{
		if (arr[middle] < num)
			first = middle + 1;
		else if (arr[middle] == num) {
			return true;
		}
		else
			last = middle - 1;
		middle = (first + last)/2;
	}
	return false;
}
//-------------------------------------------------
void quickSort(int arr[], int low, int high)
{
	if (low < high)
	{
		int pivot = partition(arr, low, high);
		quickSort(arr, low, pivot - 1);
		quickSort(arr, pivot + 1, high);
	}
}
//------------------------------------------------
int partition (int arr[], int low, int high)
{
	int pivot = arr[high], j;
	int i = (low - 1);
	for (j = low; j <= high - 1; j++)
		if (arr[j] < pivot)
		{
			i++;
			swap(&arr[i], &arr[j]);
		}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}
//--------------------------------------
void swap(int* i, int* j)
{
	int temp = *i;
	*i = *j;
	*j = temp;
}





