/* ex4b.c
 * =============================================
 * ==== Written by: Eliachar Feig. ID: 302278338 ===
 * =============================================
 * This program creates a message queue for communicates from sever to client
 * and builds array of 50000 and insert to it randomally from 0 to 200000.
 * Proceess will run until he erase all the array according to the numbers
 * sent by the clients each client will run in an infinite loop and will send
 * to server randomly a number from 0 to 200000,and send its ID pid process
 *  the server get it and send 0 if not found and 1 if found, that's how the
 *  client can calculate how many number he sent that made deletion in the server
 *  array.
 *  The child will calculate how many numbers he sent and how many caused a
 *  deletion in the server array.
 *  When the array is empty the server exit loop and send to clients process -1
 *  which tell them to terminate. Server will release the message queue and
 *   terminate then the program
 *   The client gets in argument  vector
 *
 * No input
 * Output : Server: how many numbers got from children, how many he deleted and
 * how much time took for do the job
 *          Client: how many number send and how many caused a delete
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <signal.h>
#include <stdbool.h>
#include <time.h>
#include <unistd.h>
#include <sys/wait.h>
//---------------------------------------------
#define      MAX_ARR     50000
#define      MAX_RAND    200000
#define      MSG_TYPE    1
#define      MAX_CLIENT  3
#define      TRUE        1
#define      FALSE       0
#define      END        -1
//---------------------------------------------------
struct Data {
	pid_t _id ;
	int _num ;
} ;
struct my_msgbuf {
	long mtype;
	struct Data _data ;
};
//---------------------------------------------------
void get_ready(int arr_of_pid[], int msqid);
void build_array(int arr[], char seed[]);
void do_nain_job_get_search_send_reponse(int arr[], int msqid);
int delete_from_arr(int arr[], int max_arr, int num_to_del);
void quickSort(int arr[], int low, int high);
int partition (int arr[], int low, int high);
void swap(int* i, int* j);
bool bin_search(int arr[], int num);
void release_clients_and_queue(int arr_of_pid[], int msqid);
void catch_term(int s);
void exit_error(char *str);
//---------------------------------------------------
int end = FALSE ;
//---------------------------------------------------
int main(int argc, char *argv[])
{
	if (argc != 2)
		exit_error("argc");
	int msqid;
	key_t key;
	signal(SIGTERM, catch_term) ;
	if ((key = ftok(".", '4')) == END)
		exit_error("ftok1");
	if ((msqid = msgget(key, 0600 | IPC_CREAT| IPC_EXCL)) == END)
		exit_error("msgget1");

	int arr_of_pid[3] = {0};
	get_ready(arr_of_pid, msqid);

	int arr[MAX_ARR];
	build_array(arr, argv[1]);//build array
	quickSort(arr, 0,  MAX_ARR-1);//sort array

	do_nain_job_get_search_send_reponse(arr, msqid);

	release_clients_and_queue(arr_of_pid, msqid);
	return EXIT_SUCCESS;
}
//---------------------------------------------------
void get_ready(int arr_of_pid[], int  msqid)
{
	struct my_msgbuf my_msg;
	for (int i = 0; i < MAX_CLIENT ; i++)	{
		msgrcv(msqid, &my_msg, sizeof(struct Data), MSG_TYPE, 0); // sever send
		arr_of_pid[i] = my_msg._data._id;
	}
	for (int i = 0; i < MAX_CLIENT ; i++)
	{
		my_msg.mtype = arr_of_pid[i];
		my_msg._data._num = 0;
		my_msg._data._id = 0;
		if(msgsnd(msqid, &my_msg,sizeof(struct Data),0) == END){//server receive
			end = TRUE;
			perror("msgsnd1 failed"); }
	}
}
//---------------------------------------------------
void build_array(int arr[], char seed[])
{
	srand(atoi(seed));
	for (int i = 0; i < MAX_ARR; i++) // build array, max = 50000
		arr[i] = rand()% MAX_RAND;// 0 -200000
}
//---------------------------------------------------
void do_nain_job_get_search_send_reponse(int arr[], int msqid)
{
	struct my_msgbuf my_msg;
	int max_arr = MAX_ARR ,num_of_father_get = 0, num_of_del = 0;
	time_t time1 = time(NULL);
	while(max_arr != 0) // main
	{
		if (msgrcv(msqid, &my_msg, 	sizeof(struct Data), MSG_TYPE, 0) == END) {
			perror("msgrcv failed");
			end = TRUE ; 	}

		num_of_father_get++;
		if (bin_search(arr, my_msg._data._num)) // if find the num in array
		{
			max_arr = delete_from_arr(arr,max_arr, my_msg._data._num);
			num_of_del++; // set
			my_msg._data._num = TRUE; // 1
		}
		else
			my_msg._data._num = FALSE; /// 0

		my_msg.mtype = my_msg._data._id ;
		if (!end && msgsnd(msqid, &my_msg,	sizeof(struct Data), 0) == END) {
			perror("msgsnd1 failed");
			end = TRUE ;	}
	}
	time_t time2 = time(NULL);
	time_t time = time2 - time1;
	printf("%d %d %lf\n",	num_of_father_get, num_of_del, (double)time);//print results
}
//----------------------------------------------------------
int delete_from_arr(int arr[], int max_arr, int num_to_del)
{
	int i, j;
	for (i = 0; i < max_arr; i++)
		if (arr[i] == num_to_del)
			break;
	if (i <= max_arr)
	{
		max_arr--;
		for (j = i; j < max_arr; j++)
			arr[j] = arr[j+1];
	}
	return max_arr;
}
//---------------------------------------------------------------------------
bool bin_search(int arr[], int num)
{
	int first = 0;
	int last = MAX_ARR - 1;
	int middle = (first + last)/2;
	while (first <= last)
	{
		if (arr[middle] < num)
			first = middle + 1;
		else if (arr[middle] == num) {
			return true;
		}
		else
			last = middle - 1;
		middle = (first + last)/2;
	}
	return false;
}
//-------------------------------------------------
void quickSort(int arr[], int low, int high)
{
	if (low < high)
	{
		int pivot = partition(arr, low, high);
		quickSort(arr, low, pivot - 1);
		quickSort(arr, pivot + 1, high);
	}
}
//------------------------------------------------
int partition (int arr[], int low, int high)
{
	int pivot = arr[high], j;
	int i = (low - 1);
	for (j = low; j <= high - 1; j++)
		if (arr[j] < pivot)	{
			i++;
			swap(&arr[i], &arr[j]);
		}
	swap(&arr[i + 1], &arr[high]);
	return (i + 1);
}
//--------------------------------------
void swap(int* i, int* j)
{
	int temp = *i;
	*i = *j;
	*j = temp;
}
//---------------------------------------------------
void release_clients_and_queue(int arr_of_pid[], int msqid)
{
	struct my_msgbuf my_msg;
	for(int i = 0; i < MAX_CLIENT;i++)
	{
		my_msg.mtype = arr_of_pid[i];
		my_msg._data._num = END;
		if(msgsnd(msqid, &my_msg, sizeof(struct Data), 0) == END)
			perror("failed send1...\n");
	}
	if (msgctl(msqid, IPC_RMID, NULL) == END)
		perror("msgctl failed");
}
//------------------------------------------
void catch_term(int s) { end = TRUE ;}
//-------------------------------------
void exit_error(char *str)
{
	perror(str);
	exit(EXIT_FAILURE);
}
