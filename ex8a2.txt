#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <sys/msg.h>
#include <signal.h>
#include <stdbool.h>
#include <time.h>
#include <sys/wait.h>
#include <pthread.h>
#include <semaphore.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/stat.h>

#define   ARR_SIZE   1000
#define   MAX_RAND   200000
#define   TRUE       1
#define   ONE        1
#define   LOCK_CELL  4
#define   LOCK       1
#define   UNLOCK     0
#define   FOUR       4
#define   END        -1
//---------------------------------------
void get_ready(int shm_ptr[]);
int delete_from_arr(int arr[], int num_to_del ,int *num_of_del);
void exit_error(char str[]);
//----------------------------------------------
int main(int argc, char *argv[])
{
	key_t key ;
	int shm_id ;
	if ((key = ftok(".", '8'))  == END)
		exit_error("ftok failed") ;
	if ((shm_id = shmget(key, ARR_SIZE, 0600)) == END)
		exit_error("shmget failed") ;
	int *shm_ptr = (int*) shmat(shm_id, NULL, 0) ;
	if (shm_ptr == (int*) END)
		exit_error("shmat failed: ") ;

	printf ("before\n");
	sem_t *mutex = sem_open("m", 0);
	if(mutex == SEM_FAILED)
		exit_error("child sem open failed");

	shm_ptr[atoi(argv[ONE])] = ONE;
	get_ready(shm_ptr);

	srand(atoi(argv[ONE]));
	int num_client_rand = 0, num_of_del = 0;
	int check = 0;
	while (check != -2)
	{
		int rand_num = rand()% MAX_RAND;
		sem_wait(mutex);
		num_client_rand++;

	  check = delete_from_arr(shm_ptr, rand_num, &num_of_del);
      //printf("check: %d\n", check);
		if (check == -2) // all array is empty
		{
			sem_post(mutex);
			break;
		}

		sem_post(mutex);
	}
	kill (shm_ptr[0], SIGINT); // send to server
	printf("%d %d \n", num_client_rand, num_of_del);
	sem_close(mutex);
	return EXIT_SUCCESS;
}
//------------------------------------------------------
int delete_from_arr(int arr[], int num_to_del, int *num_of_del)
{
	int check = -2, i;
	for (i = 4; i < ARR_SIZE; i++)
		if (arr[i] == num_to_del)
		{ // looking for the num
			arr[i] = END;// putting -1 to tell is empty
			(*num_of_del)++;
			//check = 1;
			break;
		}
	if (i <= ARR_SIZE)
		for (int i = 4; i < ARR_SIZE; i++)
			if (arr[i] != END)
				 check = 0;
	return check;
}
//-----------------------------------------------------------
void get_ready(int shm_ptr[])
{
	while(TRUE)
	{
		if (    shm_ptr[1] == ONE
		     && shm_ptr[2] == ONE
		     && shm_ptr[3] == ONE)
			break;
	}
}
//-----------------------------------------------------
void exit_error(char str[])
{
	perror(str);
	exit (EXIT_FAILURE);
}
//------------------------------


