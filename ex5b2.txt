#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <signal.h>
#include <time.h>

#define   ARR_SIZE2  22
#define   LOCK       4
#define   TRUE       1
#define   FALSE      0
#define   PID2       0
#define   PID3       21
#define   END        -1
//---------------------------------------
void run_decomposition(int arr2[], int shm_id2);
void decompose(int num, int arr[]);
void sig_catch(int status);
void sig_terminate(int status);
void release_shm(int shm_id2);
void exit_error(char str[]);
//---------------------------------
int end = FALSE;
//----------------------------------------------------------------------------
int main()
{
	signal(SIGINT, sig_terminate);
	signal(SIGUSR2, sig_catch);
	key_t key2 ;
	int shm_id2 ;

	if ((key2 = ftok(".", 'd')) == END)
		exit_error("ftok failed") ;
	if ((shm_id2 = shmget(key2, ARR_SIZE2, IPC_CREAT | IPC_EXCL | 0600)) == END)
		exit_error("shmget failed") ;
	int *shm_ptr2 ;
	if ((shm_ptr2 = (int*) shmat(shm_id2, NULL, 0))  == (int*) END)
		exit_error("shmat failed: ") ;

	run_decomposition(shm_ptr2, shm_id2);

	return EXIT_SUCCESS;
}
//--------------------------------------------
void run_decomposition(int arr2[], int shm_id2)
{
	arr2[PID2] = getpid();
	while (TRUE)
	{
		if(end)
			release_shm(shm_id2);
		pause();

	    decompose(arr2[1], arr2);

		kill (arr2[PID3/*21*/], SIGUSR2);
	}
}
//----------------------------------------------------
void decompose(int num, int arr2[])
{
	if (num < 2)
	{
		arr2[2] = num;
		return;
	}

   int div = 2;
   int counter = 2;
	while (num > 1)
	{
		int i = 0;
		while (num % div == 0)
		{
			++i;
			num /= div;
		}
		if (i != 0)
		{
			arr2[counter] = div;
			counter++;
			if (i != 1)
				arr2[counter] = 1;
		}
		div = (div == 2) ? 3 : div + 2;
	}
}
//------------------------------
void sig_catch(int status)
{ ; }
//-------------------------------------
void sig_terminate(int status)
{	end = TRUE; }
//-----------------------------------------
void release_shm( int shm_id2)
{
	if (shmctl(shm_id2, IPC_RMID, NULL) == END)
		exit_error("shmctl failed\n") ;
}
//--------------------------------------------
void exit_error(char str[])
{
	perror(str);
	exit (EXIT_FAILURE);
}









